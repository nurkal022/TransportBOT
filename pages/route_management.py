import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏",
    page_icon="üöõ",
    layout="wide"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_database_connection():
    conn = sqlite3.connect('transport_expenses.db', check_same_thread=False)
    return conn

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_drivers(conn):
    return pd.read_sql("SELECT telegram_id, full_name FROM drivers", conn)

def load_cities(conn):
    cities_start = pd.read_sql("SELECT DISTINCT start_point FROM routes", conn)
    cities_end = pd.read_sql("SELECT DISTINCT end_point FROM routes", conn)
    return pd.concat([cities_start['start_point'], cities_end['end_point']]).unique()

def load_cargo_types(conn):
    return pd.read_sql("SELECT DISTINCT cargo_type FROM routes", conn)['cargo_type'].unique()

def load_active_routes(conn):
    return pd.read_sql("""
        SELECT 
            r.route_name,
            r.start_point,
            r.end_point,
            r.distance,
            r.price,
            r.cargo_type,
            d.full_name as driver_name,
            re.start_time,
            re.status
        FROM routes r
        JOIN route_executions re ON r.id = re.route_id
        JOIN drivers d ON re.driver_id = d.telegram_id
        WHERE re.status IN ('assigned', 'in_progress')
        ORDER BY re.start_time DESC
    """, conn)

def load_filtered_routes(conn, selected_driver, selected_status, selected_cargo):
    query = """
        SELECT 
            r.route_name,
            r.start_point,
            r.end_point,
            r.distance,
            r.price,
            r.cargo_type,
            d.full_name as driver_name,
            re.start_time,
            re.end_time,
            re.status
        FROM routes r
        JOIN route_executions re ON r.id = re.route_id
        JOIN drivers d ON re.driver_id = d.telegram_id
        WHERE 1=1
    """
    
    if selected_driver != '–í—Å–µ':
        query += f" AND d.full_name = '{selected_driver}'"
    if selected_status != '–í—Å–µ':
        query += f" AND re.status = '{selected_status}'"
    if selected_cargo != '–í—Å–µ':
        query += f" AND r.cargo_type = '{selected_cargo}'"
    
    query += " ORDER BY re.start_time DESC"
    
    return pd.read_sql(query, conn)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
def add_new_route(conn, route_data):
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS routes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                route_name TEXT,
                start_point TEXT,
                end_point TEXT,
                distance INTEGER,
                price INTEGER,
                cargo_type TEXT,
                created_at DATETIME
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS route_executions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                route_id INTEGER,
                driver_id INTEGER,
                start_time DATETIME,
                end_time DATETIME,
                status TEXT,
                FOREIGN KEY (route_id) REFERENCES routes(id),
                FOREIGN KEY (driver_id) REFERENCES drivers(telegram_id)
            )
        """)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        cursor.execute("""
            INSERT INTO routes 
            (route_name, start_point, end_point, distance, price, cargo_type, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            f"–ú–∞—Ä—à—Ä—É—Ç {route_data['start_point']}-{route_data['end_point']}",
            route_data['start_point'],
            route_data['end_point'],
            route_data['distance'],
            route_data['price'],
            route_data['cargo_type'],
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        
        route_id = cursor.lastrowid
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—é
        if route_data['driver_id']:
            cursor.execute("""
                INSERT INTO route_executions 
                (route_id, driver_id, start_time, status)
                VALUES (?, ?, ?, ?)
            """, (
                route_id, 
                route_data['driver_id'], 
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 
                'assigned'
            ))
        
        conn.commit()
        return True, "–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except Exception as e:
        conn.rollback()
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}"

# –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = get_database_connection()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
drivers = load_drivers(conn)
cities = load_cities(conn)
cargo_types = load_cargo_types(conn)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
with st.form("add_route_form"):
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ó–∞–º–µ–Ω—è–µ–º selectbox –Ω–∞ text_input –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
        start_point = st.text_input(
            "–û—Ç–∫—É–¥–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        
        end_point = st.text_input(
            "–ö—É–¥–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
        )
        
        driver = st.selectbox(
            "–í–æ–¥–∏—Ç–µ–ª—å",
            options=[None] + drivers['telegram_id'].tolist(),
            format_func=lambda x: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è' if x is None else drivers[drivers['telegram_id'] == x]['full_name'].iloc[0],
            index=0
        )
    
    with col2:
        distance = st.number_input("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", min_value=1, value=100)
        price = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–µ–Ω–≥–µ)", min_value=1000, value=50000)
        cargo_type = st.selectbox(
            "–¢–∏–ø –≥—Ä—É–∑–∞", 
            options=[''] + list(cargo_types) if len(cargo_types) > 0 else ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–¢–µ—Ö–Ω–∏–∫–∞', '–ú–µ–±–µ–ª—å', '–û–¥–µ–∂–¥–∞'],
            index=0
        )
    
    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    
    if submitted:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not start_point.strip() or not end_point.strip() or not driver or not cargo_type:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã")
        elif start_point.strip() == end_point.strip():
            st.error("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏")
        else:
            route_data = {
                'start_point': start_point.strip(),
                'end_point': end_point.strip(),
                'driver_id': driver,
                'distance': distance,
                'price': price,
                'cargo_type': cargo_type
            }
            
            success, message = add_new_route(conn, route_data)
            if success:
                st.success(message)
                # –ó–∞–º–µ–Ω—è–µ–º experimental_rerun –Ω–∞ rerun
                st.rerun()
            else:
                st.error(message)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã")

active_routes = load_active_routes(conn)
 
if not active_routes.empty:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    active_routes['start_time'] = pd.to_datetime(active_routes['start_time']).dt.strftime('%Y-%m-%d %H:%M')
    active_routes['price'] = active_routes['price'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    active_routes['distance'] = active_routes['distance'].apply(lambda x: f"{x:,.0f} –∫–º")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    active_routes.columns = [
        '–ú–∞—Ä—à—Ä—É—Ç', '–û—Ç–∫—É–¥–∞', '–ö—É–¥–∞', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–°—Ç–æ–∏–º–æ—Å—Ç—å', 
        '–¢–∏–ø –≥—Ä—É–∑–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '–°—Ç–∞—Ç—É—Å'
    ]
    
    st.dataframe(active_routes, use_container_width=True)
else:
    st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
st.subheader("–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")

col1, col2, col3 = st.columns(3)

with col1:
    selected_driver = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é",
        options=['–í—Å–µ'] + drivers['full_name'].tolist()
    )

with col2:
    selected_status = st.selectbox(
        "–°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∞",
        options=['–í—Å–µ', 'completed', 'assigned', 'in_progress']
    )

with col3:
    selected_cargo = st.selectbox(
        "–¢–∏–ø –≥—Ä—É–∑–∞",
        options=['–í—Å–µ'] + list(cargo_types)
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
filtered_routes = load_filtered_routes(conn, selected_driver, selected_status, selected_cargo)

if not filtered_routes.empty:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    filtered_routes['start_time'] = pd.to_datetime(filtered_routes['start_time']).dt.strftime('%Y-%m-%d %H:%M')
    filtered_routes['end_time'] = pd.to_datetime(filtered_routes['end_time']).dt.strftime('%Y-%m-%d %H:%M')
    filtered_routes['price'] = filtered_routes['price'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    filtered_routes['distance'] = filtered_routes['distance'].apply(lambda x: f"{x:,.0f} –∫–º")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    filtered_routes.columns = [
        '–ú–∞—Ä—à—Ä—É—Ç', '–û—Ç–∫—É–¥–∞', '–ö—É–¥–∞', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–°—Ç–æ–∏–º–æ—Å—Ç—å', 
        '–¢–∏–ø –≥—Ä—É–∑–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'
    ]
    
    st.dataframe(filtered_routes, use_container_width=True)
else:
    st.info("–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º") 