import streamlit as st
import folium
from folium import plugins
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from streamlit_folium import folium_static
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
    page_icon="üöõ",
    layout="wide"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_database_connection():
    return sqlite3.connect('transport_expenses.db', check_same_thread=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
def load_drivers(conn):
    return pd.read_sql("SELECT telegram_id, full_name FROM drivers", conn)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞)
DEMO_LOCATIONS = {
    "–ê–ª–º–∞—Ç—ã": {"lat": 43.2220, "lon": 76.8512},
    "–ê—Å—Ç–∞–Ω–∞": {"lat": 51.1801, "lon": 71.446},
    "–®—ã–º–∫–µ–Ω—Ç": {"lat": 42.3174, "lon": 69.5956},
    "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞": {"lat": 49.8047, "lon": 73.1094},
    "–ê–∫—Ç–æ–±–µ": {"lat": 50.2785, "lon": 57.2072},
    "–¢–∞—Ä–∞–∑": {"lat": 42.9000, "lon": 71.3667},
    "–ü–∞–≤–ª–æ–¥–∞—Ä": {"lat": 52.2873, "lon": 76.9674},
    "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫": {"lat": 49.9481, "lon": 82.6276},
    "–°–µ–º–µ–π": {"lat": 50.4265, "lon": 80.2671},
    "–ê—Ç—ã—Ä–∞—É": {"lat": 47.1167, "lon": 51.8833},
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
def generate_demo_vehicle_data(drivers_df):
    vehicles = []
    statuses = ['–í –ø—É—Ç–∏', '–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ', '–ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞']
    
    for _, driver in drivers_df.iterrows():
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥
        city = random.choice(list(DEMO_LOCATIONS.keys()))
        location = DEMO_LOCATIONS[city]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        lat = location['lat'] + random.uniform(-0.1, 0.1)
        lon = location['lon'] + random.uniform(-0.1, 0.1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        speed = random.randint(0, 90)
        status = random.choice(statuses)
        
        vehicles.append({
            'driver_id': driver['telegram_id'],
            'driver_name': driver['full_name'],
            'lat': lat,
            'lon': lon,
            'speed': speed,
            'status': status,
            'last_update': datetime.now() - timedelta(minutes=random.randint(0, 30)),
            'destination': random.choice(list(DEMO_LOCATIONS.keys())),
            'cargo': random.choice(['–ü—Ä–æ–¥—É–∫—Ç—ã', '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–¢–µ—Ö–Ω–∏–∫–∞', '–ú–µ–±–µ–ª—å'])
        })
    
    return pd.DataFrame(vehicles)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
def create_map(vehicles_df):
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É
    m = folium.Map(
        location=[48.0196, 66.9237],
        zoom_start=5,
        tiles='CartoDB positron'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    for city, coords in DEMO_LOCATIONS.items():
        folium.CircleMarker(
            location=[coords['lat'], coords['lon']],
            radius=8,
            popup=city,
            color="#3186cc",
            fill=True,
            fill_color="#3186cc"
        ).add_to(m)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    for _, vehicle in vehicles_df.iterrows():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        icon_color = {
            '–í –ø—É—Ç–∏': 'green',
            '–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ': 'blue',
            '–ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ': 'orange',
            '–û—Å—Ç–∞–Ω–æ–≤–∫–∞': 'red'
        }.get(vehicle['status'], 'gray')
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        popup_html = f"""
            <div style="width: 200px;">
                <h4>{vehicle['driver_name']}</h4>
                <p><b>–°—Ç–∞—Ç—É—Å:</b> {vehicle['status']}</p>
                <p><b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {vehicle['speed']} –∫–º/—á</p>
                <p><b>–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {vehicle['destination']}</p>
                <p><b>–ì—Ä—É–∑:</b> {vehicle['cargo']}</p>
                <p><b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {vehicle['last_update'].strftime('%H:%M')}</p>
            </div>
        """

        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –≥—Ä—É–∑–æ–≤–∏–∫–∞
        truck_icon = folium.features.CustomIcon(
            icon_image=f'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-{icon_color}.png',
            icon_size=(25, 41),
            icon_anchor=(12, 41),
            popup_anchor=(0, -41)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
        folium.Marker(
            location=[vehicle['lat'], vehicle['lon']],
            popup=folium.Popup(popup_html, max_width=300),
            icon=truck_icon,
            tooltip=f"{vehicle['driver_name']} - {vehicle['status']}"
        ).add_to(m)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        folium.Circle(
            location=[vehicle['lat'], vehicle['lon']],
            radius=1000,  # —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
            color=icon_color,
            fill=True,
            fill_opacity=0.2
        ).add_to(m)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    plugins.LocateControl().add_to(m)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    plugins.Fullscreen().add_to(m)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    plugins.MeasureControl(
        position='topleft',
        primary_length_unit='kilometers',
        secondary_length_unit='miles',
        primary_area_unit='sqmeters',
        secondary_area_unit='acres'
    ).add_to(m)

    return m

# –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = get_database_connection()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üó∫Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
drivers_df = load_drivers(conn)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
vehicles_df = generate_demo_vehicle_data(drivers_df)

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
        len(vehicles_df)
    )

with col2:
    in_motion = len(vehicles_df[vehicles_df['status'] == '–í –ø—É—Ç–∏'])
    st.metric(
        "–í –¥–≤–∏–∂–µ–Ω–∏–∏",
        in_motion
    )

with col3:
    loading = len(vehicles_df[vehicles_df['status'].isin(['–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ', '–ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ'])])
    st.metric(
        "–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ/—Ä–∞–∑–≥—Ä—É–∑–∫–µ",
        loading
    )

with col4:
    stopped = len(vehicles_df[vehicles_df['status'] == '–û—Å—Ç–∞–Ω–æ–≤–∫–∞'])
    st.metric(
        "–ù–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ",
        stopped
    )

# –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
st.subheader("–ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
m = create_map(vehicles_df)
folium_static(m, width=1400, height=600)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
detailed_df = vehicles_df[['driver_name', 'status', 'speed', 'destination', 'cargo', 'last_update']].copy()
detailed_df['last_update'] = detailed_df['last_update'].dt.strftime('%H:%M')
detailed_df.columns = ['–í–æ–¥–∏—Ç–µ–ª—å', '–°—Ç–∞—Ç—É—Å', '–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)', '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–ì—Ä—É–∑', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ']
st.dataframe(detailed_df, use_container_width=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
status_filter = st.sidebar.multiselect(
    "–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
    options=['–í –ø—É—Ç–∏', '–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ', '–ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞'],
    default=['–í –ø—É—Ç–∏', '–ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ', '–ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞']
)

cargo_filter = st.sidebar.multiselect(
    "–¢–∏–ø –≥—Ä—É–∑–∞",
    options=vehicles_df['cargo'].unique(),
    default=vehicles_df['cargo'].unique()
)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
st.sidebar.info("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")

# –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
st.sidebar.subheader("–õ–µ–≥–µ–Ω–¥–∞")
legend_html = """
<div style="padding: 10px; background-color: white; border-radius: 5px;">
    <div style="margin-bottom: 5px;">
        <img src="https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png" 
             style="width: 20px; vertical-align: middle;"> –í –ø—É—Ç–∏
    </div>
    <div style="margin-bottom: 5px;">
        <img src="https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png" 
             style="width: 20px; vertical-align: middle;"> –ù–∞ –ø–æ–≥—Ä—É–∑–∫–µ
    </div>
    <div style="margin-bottom: 5px;">
        <img src="https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png" 
             style="width: 20px; vertical-align: middle;"> –ù–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ
    </div>
    <div style="margin-bottom: 5px;">
        <img src="https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png" 
             style="width: 20px; vertical-align: middle;"> –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    </div>
</div>
"""
st.sidebar.markdown(legend_html, unsafe_allow_html=True)