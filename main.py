import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database import Database
from keyboards import get_main_keyboard, get_expense_types_keyboard, get_expense_list_keyboard, get_receipt_button, get_routes_keyboard, get_route_details_keyboard, get_route_history_keyboard
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database("transport_expenses.db")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class ExpenseStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_receipt = State()
    waiting_for_comment = State()

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    with db as database:
        if not database.driver_exists(message.from_user.id):
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è."
            )
            await state.set_state(RegistrationStates.waiting_for_name)
        else:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@dp.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    user_data = await state.get_data()
    
    with db as database:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.add_driver(
            telegram_id=message.from_user.id,
            full_name=user_data['full_name'],
            phone=phone
        )
    
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_expense_types_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞
@dp.callback_query(F.data.startswith("expense_"))
async def process_expense_type(callback: CallbackQuery, state: FSMContext):
    expense_type = callback.data.split("_")[1]
    await state.update_data(expense_type=expense_type)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ç–µ–Ω–≥–µ):\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
    )
    await state.set_state(ExpenseStates.waiting_for_amount)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(StateFilter(ExpenseStates.waiting_for_amount))
async def process_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        await state.update_data(amount=amount)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
        )
        await state.set_state(ExpenseStates.waiting_for_receipt)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000"
        )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞
@dp.message(StateFilter(ExpenseStates.waiting_for_receipt))
async def process_receipt(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    if not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
        )
        return

    photo = message.photo[-1]
    await state.update_data(receipt_photo=photo.file_id)
    
    await message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
    )
    await state.set_state(ExpenseStates.waiting_for_comment)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message(StateFilter(ExpenseStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    active_route = db.get_active_route(message.from_user.id)
    route_execution_id = active_route[0] if active_route else None
    
    db.add_expense(
        driver_id=message.from_user.id,
        expense_type=user_data['expense_type'],
        amount=user_data['amount'],
        receipt_photo=user_data['receipt_photo'],
        comment=message.text,
        route_execution_id=route_execution_id
    )
    
    await state.clear()
    await message.answer(
        "‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message(F.text == "üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã")
async def show_expenses(message: Message):
    expenses = db.get_driver_expenses(message.from_user.id)
    
    if not expenses:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        return
    
    total_amount = sum(expense['amount'] for expense in expenses)
    formatted_total = "{:,}".format(int(total_amount)).replace(",", " ")
    
    expense_list = []
    for expense in expenses:
        formatted_amount = "{:,}".format(int(expense['amount'])).replace(",", " ")
        formatted_date = expense['date'].strftime("%d.%m.%Y %H:%M")
        
        expense_text = (
            f"üí∞ {formatted_amount} —Ç–≥ - {expense['type']}\n"
            f"üìÖ {formatted_date}\n"
            f"üöõ {expense['route']}\n"
            f"üí≠ {expense['comment'] if expense['comment'] else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n"
        )
        expense_list.append(expense_text)
    
    await message.answer(
        f"üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
        f"{'‚Äî' * 30}\n"
        f"{('‚Äî' * 30 + '\n').join(expense_list)}"
        f"{'‚Äî' * 30}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: {formatted_total} —Ç–≥",
        reply_markup=get_expense_list_keyboard(expenses)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞—Å—Ö–æ–¥
@dp.callback_query(F.data.startswith("show_expense_"))
async def show_expense_details(callback: CallbackQuery):
    expense_date = callback.data.replace("show_expense_", "")
    expense = db.get_expense_by_date(callback.from_user.id, expense_date)
    
    if not expense:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    exp_type, amount, receipt_photo, comment, date_str = expense
    
    try:
        date = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S.%f')
        formatted_date = date.strftime("%d.%m.%Y %H:%M")
    except:
        formatted_date = date_str
        
    try:
        formatted_amount = "{:,}".format(int(float(amount))).replace(",", " ")
    except (ValueError, TypeError):
        formatted_amount = str(amount)
    
    response = (
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
        f"üìã –¢–∏–ø: {exp_type}\n"
        f"üí∞ –°—É–º–º–∞: {formatted_amount} —Ç–µ–Ω–≥–µ\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"
    )
    
    await callback.message.edit_text(
        response,
        reply_markup=get_receipt_button(expense_date)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —á–µ–∫–∞
@dp.callback_query(F.data.startswith("show_receipt_"))
async def show_receipt(callback: CallbackQuery):
    expense_date = callback.data.replace("show_receipt_", "")
    expense = db.get_expense_by_date(callback.from_user.id, expense_date)
    
    if not expense:
        await callback.answer("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    _, _, receipt_photo, _, _ = expense
    
    if receipt_photo:
        try:
            await callback.message.answer_photo(
                receipt_photo,
                caption="üßæ –§–æ—Ç–æ —á–µ–∫–∞"
            )
            await callback.answer()
        except Exception as e:
            logging.error(f"Error sending receipt photo: {e}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞")
    else:
        await callback.answer("–ß–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
@dp.message(F.text == "üöõ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")
async def show_routes(message: Message):
    active_route = db.get_active_route(message.from_user.id)
    
    if active_route:
        route_id, name, start, end, start_time = active_route
        try:
            # start_time —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ get_active_route
            formatted_time = start_time.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_time = str(start_time)  # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        
        await message.answer(
            f"üöõ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:\n\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {name}\n"
            f"–û—Ç–∫—É–¥–∞: {start}\n"
            f"–ö—É–¥–∞: {end}\n"
            f"–ù–∞—á–∞–ª–æ: {formatted_time}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç:",
            reply_markup=get_routes_keyboard([], active_route=True)
        )
        return
    
    routes = db.get_available_routes()
    if not routes:
        await message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:",
        reply_markup=get_routes_keyboard(routes)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
@dp.callback_query(F.data.startswith("route_"))
async def show_route_details(callback: CallbackQuery):
    route_id = int(callback.data.replace("route_", ""))
    route = db.get_route_details(route_id)
    
    if not route:
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        price = float(route['price'])
        formatted_price = "{:,}".format(int(price)).replace(",", " ")
    except (ValueError, TypeError):
        formatted_price = str(route['price'])
    
    await callback.message.edit_text(
        f"üöõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ:\n\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route['name']}\n"
        f"üèÅ –û—Ç–∫—É–¥–∞: {route['start']}\n"
        f"üèÅ –ö—É–¥–∞: {route['end']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route['distance']} –∫–º\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {formatted_price} —Ç–µ–Ω–≥–µ\n"
        f"üì¶ –ì—Ä—É–∑: {route['cargo']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç:",
        reply_markup=get_route_details_keyboard(route_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.callback_query(F.data.startswith("start_route_"))
async def start_route(callback: CallbackQuery):
    route_id = int(callback.data.replace("start_route_", ""))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    active_route = db.get_active_route(callback.from_user.id)
    if active_route:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç!")
        return
    
    try:
        db.start_route(callback.from_user.id, route_id)
        route = db.get_route_details(route_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!\n\n"
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route['name']}\n"
            f"üèÅ –û—Ç–∫—É–¥–∞: {route['start']}\n"
            f"üèÅ –ö—É–¥–∞: {route['end']}\n",
            reply_markup=get_routes_keyboard([], active_route=True)
        )
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç")
    except Exception as e:
        logging.error(f"Error starting route: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
@dp.callback_query(F.data == "back_to_routes")
async def back_to_routes(callback: CallbackQuery):
    routes = db.get_available_routes()
    await callback.message.edit_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:",
        reply_markup=get_routes_keyboard(routes)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç")
async def add_test_route(message: Message):
    route_id = db.add_test_route()
    await message.answer(
        "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç —É–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
@dp.callback_query(F.data == "finish_route")
async def finish_active_route(callback: CallbackQuery):
    active_route = db.get_active_route(callback.from_user.id)
    if not active_route:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞")
        return
    
    route_id = active_route[0]  # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ä—à—Ä—É—Ç–∞
    try:
        db.finish_route(callback.from_user.id, route_id)
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –Ω–∞–∂–∞–≤ 'üöõ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã'\n"
            "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –Ω–∞–∂–∞–≤ 'üìú –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤'",
            reply_markup=get_main_keyboard()
        )
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logging.error(f"Error finishing route: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")
async def show_route_history(message: Message):
    completed_routes = db.get_completed_routes(message.from_user.id)
    
    if not completed_routes:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:",
        reply_markup=get_route_history_keyboard(completed_routes)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.callback_query(F.data.startswith("history_route_"))
async def show_completed_route_details(callback: CallbackQuery):
    route_id = int(callback.data.replace("history_route_", ""))
    route = db.get_route_details(route_id)
    
    if not route:
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        price = float(route[4]) if isinstance(route, tuple) else float(route['price'])
        formatted_price = "{:,}".format(int(price)).replace(",", " ")
    except (ValueError, TypeError, IndexError, KeyError):
        # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        formatted_price = str(route[4] if isinstance(route, tuple) else route['price'])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    if isinstance(route, tuple):
        name, start, end, distance, _, cargo = route
    else:
        name = route['name']
        start = route['start']
        end = route['end']
        distance = route['distance']
        cargo = route['cargo']
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="back_to_history")]
        ]
    )
    
    await callback.message.edit_text(
        f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ:\n\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {name}\n"
        f"üèÅ –û—Ç–∫—É–¥–∞: {start}\n"
        f"üèÅ –ö—É–¥–∞: {end}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {formatted_price} —Ç–µ–Ω–≥–µ\n"
        f"üì¶ –ì—Ä—É–∑: {cargo}\n",
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
@dp.callback_query(F.data == "back_to_history")
async def back_to_history(callback: CallbackQuery):
    completed_routes = db.get_completed_routes(callback.from_user.id)
    if not completed_routes:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.",
            reply_markup=None
        )
        return
        
    await callback.message.edit_text(
        "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:",
        reply_markup=get_route_history_keyboard(completed_routes)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 