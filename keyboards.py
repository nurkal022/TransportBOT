from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã")],
            [KeyboardButton(text="üöõ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_expense_types_keyboard():
    builder = InlineKeyboardBuilder()
    expenses = [
        ("–ë–µ–Ω–∑–∏–Ω", "fuel"),
        ("–ú–∞—Å–ª–æ", "oil"),
        ("–®–∏–Ω—ã", "tires")
    ]
    
    for expense_name, callback_data in expenses:
        builder.add(InlineKeyboardButton(
            text=expense_name,
            callback_data=f"expense_{callback_data}"
        ))
    
    builder.adjust(1)
    return builder.as_markup()

def get_expense_list_keyboard(expenses):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    for expense in expenses:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ get_driver_expenses
        formatted_date = expense['date'].strftime("%d.%m.%Y")
        formatted_amount = "{:,}".format(int(expense['amount'])).replace(",", " ")
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{formatted_date} | {expense['type']} | {formatted_amount} ‚Ç∏"
        # –°–æ–∑–¥–∞–µ–º callback_data —Å –¥–∞—Ç–æ–π
        callback_data = f"show_expense_{expense['date'].strftime('%Y-%m-%d %H:%M:%S.%f')}"
        
        keyboard.add(InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        ))
    
    keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return keyboard.as_markup()

def get_receipt_button(expense_date):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üì∏ –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫",
        callback_data=f"show_receipt_{expense_date}"
    ))
    return keyboard.as_markup()

def get_routes_keyboard(routes, active_route=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    for route_id, name, start, end in routes:
        button_text = f"üöö {name} ({start} ‚Üí {end})"
        keyboard.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"route_{route_id}"
        ))
    
    if active_route:
        keyboard.add(InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç",
            callback_data="finish_route"
        ))
    
    keyboard.adjust(1)
    return keyboard.as_markup() 

def get_route_details_keyboard(route_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üöÄ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç",
        callback_data=f"start_route_{route_id}"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data="back_to_routes"
    ))
    keyboard.adjust(1)
    return keyboard.as_markup() 

def get_route_history_keyboard(routes):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    for route_id, name, start, end, start_time, end_time, distance, price in routes:
        try:
            start_date = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S.%f').strftime("%d.%m.%Y")
            end_date = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S.%f').strftime("%d.%m.%Y")
        except:
            start_date = "???"
            end_date = "???"
            
        button_text = f"üèÅ {name} ({start_date} - {end_date})"
        keyboard.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"history_route_{route_id}"
        ))
    
    keyboard.adjust(1)
    return keyboard.as_markup()